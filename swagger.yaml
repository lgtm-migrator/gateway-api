openapi: 3.0.0
info:
  title: HDR UK API 
  description: API for Tools and artefacts repository.
  version: 0.0.1

servers:
  - url: http://localhost:3001/api

  - url: https://api.{environment}.healthdatagateway.org:{port}/api
    variables:
      environment:
        default: latest
        description: The Environment name.
      port:
        enum:
          - '443'
        default: '443'

paths:
  /v1/datasets/{datasetID}:
    get:
      summary: Returns details for a Dataset.
      tags:
        - Datasets
      parameters:
        - in: path
          name: datasetID
          required: true
          description: The ID of the datset
          schema:
            type : integer
            format: int64
            minimum: 1
            example: 89522470
      responses: 
        '200':
          description: OK    

  /v1/datasets/detail/{datasetID}:
    get:
      summary: Returns additional details for a dataset from the Metadata catalogue.
      tags:
        - Datasets
      parameters:
        - in: path
          name: datasetID
          required: true
          description: The ID of the datset
          schema:
           type : string
            example: d3a3935f-b28e-4e74-9b15-9432d611f26c
      responses: 
        '200':
          description: OK 

  /v1/datasets/?search={searchTerm}:
    get:
      summary: Returns dataset search results by searchTerm
      tags:
        - Datasets
      parameters:
        - name: searchTerm
          in: path
          required: true
          description: A search term.
          schema:
            type : string
            example: epilepsy
      responses: 
        '200':
          description: OK

  /v1/datasets/filters?search={searchTerm}:
    get:
      summary: Returns filters options for datasets
      tags:
        - Datasets
      parameters:
        - name: search
          in: query
          required: false
          description: Type of datasearch.
          schema:
            type : string
            example: epilepsy
      responses: 
        '200':
          description: OK
                
  /v1/datasets/access/request:
    post:
      summary: Access request for dataset
      security:
        - cookieAuth: []
      requestBody:
        content:
          application/json:
            schema:      # Request body contents
              type: object
              properties:
                title:
                  type: string
                  example: 'Epilepsy 12 - National organisation audit'
                userId:
                  type: integer
                  example: 12345654323456
                dataSetId:
                  type: string,
                  example: '2345654323456'
                researchAim:
                  type: string
                  example: 'The aim of your research, description needed.'
                linkedDataSets:
                  type: boolean
                  example: true
                namesOfDataSets:
                  type: string
                  example: 'The name of the datasets that are linked.'
                dataRequirements:
                  type: boolean
                  example: true
                dataSetParts:
                  type: string
                  example: 'The dataset parts that you would like.'
                startDate:
                  type: string
                  example: '19/12/2022'     
                icoRegistration:
                  type: string
                  example: '66252AAA'
                researchBenefits:
                  type: string,
                  example: 'Would benefit would this research provide.'
                ethicalProcessingEvidence:
                  type: string
                  example: 'Ethical processing evidence'
                contactNumber:
                  type: string
                  example: '07656788909'
      tags:
        - Datasets
      responses: 
        '200':
          description: OK

  /v1/data-access-request/{datasetID}:
    get:
      summary: Returns access request template.
      security:
        - cookieAuth: []
      tags:
        - Data Access Request
      parameters:
        - in: path
          name: datasetID
          required: true
          description: The ID of the datset
          schema:
            type : string
            example: 6efbc62f-6ebb-4f18-959b-1ec6fd0cc6fb
      responses: 
        '200':
          description: OK 

  /v1/data-access-request/{id}:
    patch:
      summary: Update a users question answers for access request.
      security:
        - cookieAuth: []
      tags:
        - Data Access Request
      parameters:
        - in: path
          name: datasetID
          required: true
          description: The ID of the datset
          schema:
            type : string
            example: 5ee249426136805fbf094eef
        - in: body 
          name: questionAnswers
          description: Answers object
          schema: 
            type: object
            properties:
              questionAnswers:
                type: string
                example: '{firstName: Roger}'
      responses: 
        '200':
          description: OK 
        
  /v1/person/{id}:
    get:
      summary: Returns details for a person.
      tags:
        - Person
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the person
          schema:
            type : string
            example: 900000014
      responses:
        '200':
          description: OK
  /v1/person/:
    get:
      summary: Returns an array of person objects.
      tags:
        - Person
      responses:
        '200':
          description: OK
    post:
      summary: Returns a new person object.
      tags:
        - Person
      requestBody:
        content:
          application/json:
            schema:      # Request body contents
              type: object
              required:
                - firstname
                - lastname
                - bio
                - link
                - orcid
                - emailNotifications
                - terms
              properties:
                firstname:
                  type: string
                lastname:
                  type: string
                bio:
                  type: string
                link:
                  type: string
                orcid:
                  type: string
                emailNotifications:
                  type: boolean
                terms:
                  type: boolean
              example:
                firstname: 'John'
                lastname: 'Smith'
                bio: 'Researcher'
                link: 'http://google.com'
                orcid: 'https://orcid.org/123456789'
                emailNotifications: false
                terms: true
      responses:
        '200':
          description: OK
    put:
      summary: Returns edited person object.
      tags:
        - Person
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:      # Request body contents
              type: object
              required:
                - id
                - bio
                - link
                - orcid
                - emailNotifications
                - terms
              properties:
                id:
                  type: string
                bio:
                  type: string
                link:
                  type: string
                orcid:
                  type: string
                emailNotifications:
                  type: boolean
                terms:
                  type: boolean
              example:
                id: '5268590523943617'
                bio: 'Research assistant'
                link: 'http://google.com'
                orcid: 'https://orcid.org/123456789'
                emailNotifications: false
                terms: true
      responses:
        '200':
          description: OK
          
  /v1/search:
    get:
      tags:
        - Search
      summary: Search for HDRUK /search?search
      produces:
        - application/json
      parameters:
        - in: query
          name: params
          schema:
            type: object
            properties:
              search:
                type: string
                example: Epilepsy
              type:
                type: string
                example: all
              category:
                type: string
                example: API
              programmingLanguage:
                type: string
                example: Javascript
              features:
                type: string
                example: Arbitrage
              topics:
                type: string
                example: Epilepsy
              startIndex:
                type: string
                example: 0
              maxResults:
                type: string
                example: 10
          style: form
          explode: true
      responses: 
        '200':
          description: OK

  /v1/stats:
    get:
      summary: This will return a JSON document to show high level stats.
      tags:
        - Stats
      responses: 
        '200':
          description: OK

  /v1/datasets/?search={searchTerm}:
    get:
      summary: Returns dataset search results by searchTerm
      tags:
        - Datasets
      parameters:
        - name: searchTerm
          in: path
          required: true
          description: A search term.
          schema:
            type : string
            example: epilepsy
      responses: 
        '200':
          description: OK

  /v1/stats/type?rank={rank}:
    get:
      summary: Returns the details on recent searches, popular objects or recently updated objects based on the rank query parameter.
      tags:
        - Stats
      parameters:
        - name: rank
          in: path
          required: true
          description: The type of stat.
          schema:
            type : string
            example: recent
      responses: 
        '200':
          description: OK

  /v1/stats/kpis?kpi={type}:
    get:
      summary: Returns information for KPIs, based on the KPI type parameter.
      tags:
        - Stats
      parameters:
        - name: type
          in: path
          required: true
          description: The type of KPI.
          schema:
            type : string
            example: technicalmetadata
      responses: 
        '200':
          description: OK

  /v1/stats/kpis?kpi={type}&selectedDate={selectedDate}:
    get:
      summary: Returns information for KPIs, based on the KPI type parameter.
      tags:
        - Stats
      parameters:
        - name: type
          in: path
          required: true
          description: The type of KPI.
          schema:
            type : string
            example: uptime
        - name: selectedDate
          in: path
          required: true
          description: The type of KPI.
          schema:
            type : string
            example: Wed Jul 01 2020 01:00:00 GMT 0100 (British Summer Time)
      responses: 
        '200':
          description: OK

  /v1/stats/unmetDatasets?month={month}&year={year}:
    get:
      summary: Returns unmet demand information for datasets, based on the month and year query params.
      tags:
        - Stats
      parameters:
        - name: month
          in: path
          required: true
          description: Month number.
          schema:
            type : string
            example: 7
        - name: year
          in: path
          required: true
          description: Year.
          schema:
            type : string
            example: 2020
      responses: 
        '200':
          description: OK
  
  /v1/stats/topSearches?month={month}&year={year}:
    get:
      summary: Returns top searches for a given month and year.
      tags:
        - Stats
      parameters:
        - name: month
          in: path
          required: true
          description: Month number.
          schema:
            type : string
            example: 7
        - name: year
          in: path
          required: true
          description: Year.
          schema:
            type : string
            example: 2020
      responses: 
        '200':
          description: OK

  /v1/stats/unmetTools?month={month}&year={year}:
    get:
      summary: Returns unmet demand information for tools, based on the month and year query params.
      tags:
        - Stats
      parameters:
        - name: month
          in: path
          required: true
          description: Month number.
          schema:
            type : string
            example: 7
        - name: year
          in: path
          required: true
          description: Year.
          schema:
            type : string
            example: 2020
      responses: 
        '200':
          description: OK

  /v1/stats/unmetProjects?month={month}&year={year}:
    get:
      summary: Returns unmet demand information for projects, based on the month and year query params.
      tags:
        - Stats
      parameters:
        - name: month
          in: path
          required: true
          description: Month number.
          schema:
            type : string
            example: 7
        - name: year
          in: path
          required: true
          description: Year.
          schema:
            type : string
            example: 2020
      responses: 
        '200':
          description: OK

  /v1/stats/unmetPapers?month={month}&year={year}:
    get:
      summary: Returns unmet demand information for papers, based on the month and year query params.
      tags:
        - Stats
      parameters:
        - name: month
          in: path
          required: true
          description: Month number.
          schema:
            type : string
            example: 7
        - name: year
          in: path
          required: true
          description: Year.
          schema:
            type : string
            example: 2020
      responses: 
        '200':
          description: OK

  /v1/stats/unmetPeople?month={month}&year={year}:
    get:
      summary: Returns unmet demand information for people, based on the month and year query params.
      tags:
        - Stats
      parameters:
        - name: month
          in: path
          required: true
          description: Month number.
          schema:
            type : string
            example: 7
        - name: year
          in: path
          required: true
          description: Year.
          schema:
            type : string
            example: 2020
      responses: 
        '200':
          description: OK

  /v1/tools:
    post:
      summary: Returns new Tool object with ID.
      security:
        - cookieAuth: []
      tags:
        - Tools
      requestBody:
        content:
          application/json:
            schema:      # Request body contents
              type: object
              required:
                - name
              properties:
                type:
                  type: string
                name:
                  type: string
                link:
                  type: string
                description:
                  type: string
                categories:
                  type: object
                  properties:
                    category:
                      type: string
                    programmingLanguage:
                      type: array
                      items:
                        type: string
                    programmingLanguageVersion:
                      type: string
                licence:
                  type: string
                authors:
                  type: array
                  items:
                    type: number
                tags:
                  type: object
                  properties:
                    features:
                      type: array
                      items:
                        type: string
                    topics:
                      type: array
                      items:
                        type: string      
              example:   # Sample object
                type: 'tool'
                name: 'Epilepsy data research'
                link: 'http://epilepsy.org'
                description: 'Epilespy data research description'
                categories: { category: 'API', programmingLanguage: ['Javascript'], programmingLanguageVersion: '0.0.0'}
                licence: 'MIT licence'
                authors: [4495285946631793]
                tags: {features: ['Arbitrage'], topics: ['Epilepsy']}
      responses: 
        '200':
          description: OK

  /v1/projects:
    post:
      summary: Returns a Project object with ID.
      security:
        - cookieAuth: []
      tags:
        - Projects
      requestBody:
        content:
          application/json:
            schema:      # Request body contents
              type: object
              required:
                - name
              properties:
                type:
                  type: string
                name:
                  type: string
                link:
                  type: string
                description:
                  type: string
                categories:
                  type: object
                  properties:
                    category:
                      type: string
                    programmingLanguage:
                      type: array
                      items:
                        type: string
                    programmingLanguageVersion:
                      type: string
                licence:
                  type: string
                authors:
                  type: array
                  items:
                    type: number
                tags:
                  type: object
                  properties:
                    features:
                      type: array
                      items:
                        type: string
                    topics:
                      type: array
                      items:
                        type: string      
              example:   # Sample object
                type: 'project'
                name: 'Epilepsy data research'
                link: 'http://epilepsy.org'
                description: 'Epilespy data research description'
                categories: { category: 'API', programmingLanguage: ['Javascript'], programmingLanguageVersion: '0.0.0'}
                licence: 'MIT licence'
                authors: [4495285946631793]
                tags: {features: ['Arbitrage'], topics: ['Epilepsy']}
      responses: 
        '200':
          description: OK
    get:
      summary: Returns List of Project objects.
      tags:
        - Projects
      parameters:
      - in: query
        name: limit
        required: false
        description: Limit the number of results
        schema:
          type : integer
          example: 3
      - in: query
        name: offset
        required: false
        description: Index to offset the search results
        schema:
          type : integer
          example: 1
      - in: query
        name: q
        required: false
        description: Filter using search query
        schema:
          type : string
          example: epilepsy
      responses: 
        '200':
          description: OK
  /v1/projects/{id}:
    get:
      summary: Returns Project object.
      tags:
        - Projects
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type : integer
            example: 441788967946948
      responses: 
        '200':
          description: OK
    patch:
      summary: Change status of the Project object.
      security:
        - cookieAuth: []
      tags:
        - Projects
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 662346984100503
      requestBody:
        content:
          application/json:
            schema:      # Request body contents
              type: object
              required:
                - name
              properties:
                activeflag:
                  type: string
              example:   # Sample object
                activeflag: 'active'
      responses: 
        '200':
          description: OK
    put:
      summary: Returns edited Project object.
      security:
        - cookieAuth: []
      tags:
        - Projects
      parameters:
      - in: path
        name: id
        required: true
        description: The ID of the tool
        schema:
          type : integer
          format: int64
          example: 26542005388306332
      requestBody:
        content:
          application/json:
            schema:      # Request body contents
              type: object
              required:
                - name
              properties:
                id:
                  type: number
                type:
                  type: string
                name:
                  type: string
                link:
                  type: string
                description:
                  type: string
                categories:
                  type: object
                  properties:
                    category:
                      type: string
                    programmingLanguage:
                      type: array
                      items:
                        type: string
                    programmingLanguageVersion:
                      type: string
                licence:
                  type: string
                authors:
                  type: array
                  items:
                    type: number
                tags:
                  type: object
                  properties:
                    features:
                      type: array
                      items:
                        type: string
                    topics:
                      type: array
                      items:
                        type: string    
                toolids:
                  type: array
                  items:
                    type: string
              example:   # Sample object
                id: 26542005388306332
                type: 'project'
                name: 'Research Data TEST EPILEPSY'
                link: 'http://localhost:8080/epilepsy'
                description: 'Epilespy data research description'
                categories: { category: 'API', programmingLanguage: ['Javascript'], programmingLanguageVersion: '1.0.0'}
                licence: 'MIT licence'
                authors: [4495285946631793]
                tags: {features: ['Arbitrage'], topics: ['Epilepsy']}
                toolids: []
      responses: 
        '200':
          description: OK

  /v1/paper/add:
    post:
      summary: Add a paper.
      security:
        - cookieAuth: []
      tags:
        - Paper
      requestBody:
        content:
          application/json:
            schema:      # Request body contents
              type: object
              required:
                - name
              properties:
                type:
                  type: string
                name:
                  type: string
                link:
                  type: string
                description:
                  type: string
                categories:
                  type: object
                  properties:
                    category:
                      type: string
                    programmingLanguage:
                      type: array
                      items:
                        type: string
                    programmingLanguageVersion:
                      type: string
                licence:
                  type: string
                authors:
                  type: array
                  items:
                    type: number
                tags:
                  type: object
                  properties:
                    features:
                      type: array
                      items:
                        type: string
                    topics:
                      type: array
                      items:
                        type: string      
              example:   # Sample object
                type: 'paper'
                name: 'Epilepsy data research'
                link: 'http://epilepsy.org'
                description: 'Epilespy data research description'
                categories: { category: 'API', programmingLanguage: ['Javascript'], programmingLanguageVersion: '0.0.0'}
                licence: 'MIT licence'
                authors: [4495285946631793]
                tags: {features: ['Arbitrage'], topics: ['Epilepsy']}
      responses: 
        '200':
          description: OK
        
  /v1/paper/edit:
    put:
      summary: Edit a paper.
      security:
        - cookieAuth: []
      tags:
        - Paper
      requestBody:
        content:
          application/json:
            schema:      # Request body contents
              type: object
              required:
                - name
              properties:
                id:
                  type: number
                type:
                  type: string
                name:
                  type: string
                link:
                  type: string
                description:
                  type: string
                categories:
                  type: object
                  properties:
                    category:
                      type: string
                    programmingLanguage:
                      type: array
                      items:
                        type: string
                    programmingLanguageVersion:
                      type: string
                licence:
                  type: string
                authors:
                  type: array
                  items:
                    type: number
                tags:
                  type: object
                  properties:
                    features:
                      type: array
                      items:
                        type: string
                    topics:
                      type: array
                      items:
                        type: string    
                toolids:
                  type: array
                  items:
                    type: string
              example:   # Sample object
                id: 26542005388306332
                type: 'paper'
                name: 'Research Data TEST EPILEPSY'
                link: 'http://localhost:8080/epilepsy'
                description: 'Epilespy data research description'
                categories: { category: 'API', programmingLanguage: ['Javascript'], programmingLanguageVersion: '1.0.0'}
                licence: 'MIT licence'
                authors: [4495285946631793]
                tags: {features: ['Arbitrage'], topics: ['Epilepsy']}
                toolids: []
      responses: 
        '200':
          description: OK

  /v1/paper/delete:
    delete:
      summary: Delete a paper.
      security:
        - cookieAuth: []
      tags:
        - Paper
      requestBody:
        content:
          application/json:
            schema:      # Request body contents
              type: object
              required:
                - id
              properties:
                id:
                  type: number
                id: 26542005388306332
              example:   # Sample object
                id: 26542005388306332
      responses: 
        '200':
          description: OK
  
  /v1/tools/:
    get:
      summary: Returns List of Tool objects.
      security:
        - cookieAuth: []
      tags:
        - Tools
      responses: 
        '200':
          description: OK
    
  /v1/tools/{id}:
    get:
      summary: Returns Tool object.
      security:
        - cookieAuth: []
      tags:
        - Tools
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the tool
          schema:
            type : integer
            format: int64
            minimum: 1
            example: 900000011
      responses: 
        '200':
          description: OK
    put:
      summary: Returns edited Tool object.
      security:
        - cookieAuth: []
      tags:
        - Tools
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type : integer
            example: 123
      requestBody:
        content:
          application/json:
            schema:      # Request body contents
              type: object
              required:
                - name
              properties:
                id:
                  type: number
                type:
                  type: string
                name:
                  type: string
                link:
                  type: string
                description:
                  type: string
                categories:
                  type: object
                  properties:
                    category:
                      type: string
                    programmingLanguage:
                      type: array
                      items:
                        type: string
                    programmingLanguageVersion:
                      type: string
                licence:
                  type: string
                authors:
                  type: array
                  items:
                    type: number
                tags:
                  type: object
                  properties:
                    features:
                      type: array
                      items:
                        type: string
                    topics:
                      type: array
                      items:
                        type: string    
                toolids:
                  type: array
                  items:
                    type: string
              example:   # Sample object
                id: 26542005388306332
                type: 'tool'
                name: 'Research Data TEST EPILEPSY'
                link: 'http://localhost:8080/epilepsy'
                description: 'Epilespy data research description'
                categories: { category: 'API', programmingLanguage: ['Javascript'], programmingLanguageVersion: '1.0.0'}
                licence: 'MIT licence'
                authors: [4495285946631793]
                tags: {features: ['Arbitrage'], topics: ['Epilepsy']}
                toolids: []
      responses: 
        '200':
          description: OK
    patch:
      summary: Change status of Tool object.
      security:
        - cookieAuth: []
      tags:
        - Tools
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the tool
          schema:
            type : integer
            format: int64
            example: 5032687830560181
      requestBody:
        content:
          application/json:
            schema:      # Request body contents
              type: object
              required:
                - name
              properties:
                id:
                  type: number
                activeflag:
                  type: string
              example:   # Sample object
                id: 662346984100503
                activeflag: 'active'
      responses: 
        '200':
          description: OK
    # Delete requires validation to be implemented first
    # delete:
    #   summary: Delete a tool.
    #   security:
    #     - cookieAuth: []
    #   tags:
    #     - Tools
    #   parameters:
    #     - in: path
    #       name: id
    #       required: true
    #       schema:
    #         type : integer
    #         example: 123
    #   requestBody:
    #     content:
    #       application/json:
    #         schema:      
    #           type: object
    #           required:
    #             - id
    #           properties:
    #             id:
    #               type: number
    #             id: 26542005388306332
    #           example:   # Sample object
    #             id: 26542005388306332
    #   responses: 
    #     '200':
    #       description: OK
    #     '204':
    #       description: No Content
  
  /v1/paper/get/admin:
    get:
      summary: Get paper for admin.
      security:
        - cookieAuth: []
      tags:
        - Paper
      responses: 
        '200':
          description: OK
  
  /v1/paper/get/:
    get:
      summary: Get paper for normal user.
      security:
        - cookieAuth: []
      tags:
        - Paper
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user
          schema:
            type : integer
            format: int64
            minimum: 1
            example: 8370396016757367
      responses: 
        '200':
          description: OK
  
  /v1/paper/status/:
    put:
      summary: Change status for a paper.
      security:
        - cookieAuth: []
      tags:
        - Paper
      requestBody:
        content:
          application/json:
            schema:      # Request body contents
              type: object
              required:
                - name
              properties:
                id:
                  type: number
                activeflag:
                  type: string
              example:   # Sample object
                id: 662346984100503
                activeflag: 'active'
      responses: 
        '200':
          description: OK

  # /v1/tools/get:
  #   get:
  #     summary: Tool search.
  #     tags:
  #       - Tool
  #     responses: 
  #       '200':
  #         description: OK

  # /v1/tools/get/admin:
  #   get:
  #     summary: Tool search admins.
  #     tags:
  #       - Tool
  #     responses: 
  #       '200':
  #         description: OK

  # /v1/tools/status:
  #   put:
  #     summary: Tool update status.
  #     tags:
  #       - Tool
  #     responses: 
  #       '200':
  #         description: OK

    # /v1/project/get:
  #   get:
  #     summary: Project search.
  #     tags:
  #       - Project
  #     responses: 
  #       '200':
  #         description: OK

  # /v1/project/get/admin:
  #   get:
  #     summary: Project search admins.
  #     tags:
  #       - Project
  #     responses: 
  #       '200':
  #         description: OK

  # /v1/project/status:
  #   put:
  #     summary: Project update status.
  #     tags:
  #       - Project
  #     responses: 
  #       '200':
  #         description: OK

     # /v1/paper/get:
  #   get:
  #     summary: Paper search.
  #     tags:
  #       - Paper
  #     responses: 
  #       '200':
  #         description: OK

  # /v1/paper/get/admin:
  #   get:
  #     summary: Paper search admins.
  #     tags:
  #       - Paper
  #     responses: 
  #       '200':
  #         description: OK

  # /v1/paper/status:
  #   put:
  #     summary: Paper update status.
  #     tags:
  #       - Paper
  #     responses: 
  #       '200':
  #         description: OK

  # /v1/users/{userId}:
  #   get:
  #     summary: Find user by id.
  #     tags:
  #       - Users
  #   parameters:
  #     - name: userId
  #       in: path
  #       required: true
  #       description: The ID of the user
  #       schema:
  #         type : string
  #         example: b2475d19-75fe-422b-9d0c-c53cdfff8230
  #   responses:
  #     '200':
  #       description: OK
  
  # /v1/users:
  #   get:
  #     summary: Find all users
  #     tags:
  #       - users
  #     responses: 
  #       '200':
  #         description: OK

  # /v1/auth/register:
  #   post:
  #     summary: Register User.
  #     tags:
  #       - Users
  #     responses: 
  #       '200':
  #         description: OK

  # /v1/auth/login:
  #   post:
  #     summary: Authenticate User.
  #     tags:
  #       - Auth   
  #     responses: 
  #       '200':
  #         description: OK

  # /v1/auth/logout:
  #   get:
  #     summary: Logout.
  #     tags:
  #       - Auth
  #     responses: 
  #       '200':
  #         description: OK
  
  # /v1/auth/status:
  #   get:
  #     summary: Auth status.
  #     tags:
  #       - Auth
  #     responses: 
  #       '200':
  #         description: OK

  # /v1/tools/add:
  #   post:
  #     summary: Add a tool.
  #     tags:
  #       - Tool
  #     responses: 
  #       '200':
  #         description: OK

  # /v1/tools/edit:
  #   put:
  #     summary: Edit a tool.
  #     tags:
  #       - Tool
  #     responses: 
  #       '200':
  #         description: OK

  # /v1/tools/delete:
  #   delete:
  #     summary: delete a tool.
  #     tags:
  #       - Tool
  #     responses: 
  #       '200':
  #         description: OK

  # /v1/project/add:
  #   post:
  #     summary: Add a project.
  #     tags:
  #       - Project
  #     responses: 
  #       '200':
  #         description: OK

  # /v1/project/edit:
  #   put:
  #     summary: Edit a project.
  #     tags:
  #       - Project
  #     responses: 
  #       '200':
  #         description: OK

  # /v1/project/delete:
  #   delete:
  #     summary: delete a project.
  #     tags:
  #       - Project
  #     responses: 
  #       '200':
  #         description: OK

   # /v1/paper/add:
  #   post:
  #     summary: Add a paper.
  #     tags:
  #       - Paper
  #     responses: 
  #       '200':
  #         description: OK

  # /v1/paper/edit:
  #   put:
  #     summary: Edit a paper.
  #     tags:
  #       - Paper
  #     responses: 
  #       '200':
  #         description: OK

  # /v1/paper/delete:
  #   delete:
  #     summary: delete a paper.
  #     tags:
  #       - Paper
  #     responses: 
  #       '200':
  #         description: OK
  
  # /v1/messages/{personId}:
  #   get:
  #     summary: Find messages by person.
  #     tags:
  #       - Messages
  #     parameters:
  #       - name: personId
  #         in: path
  #         required: true
  #         description: The ID of the person
  #         schema:
  #           type : string
  #           example: b2475d19-75fe-422b-9d0c-c53cdfff8230

  # /v1/messages/admin/{personId}:
  #   get:
  #     summary: find messages for admin by person id
  #     tags:
  #       - Messages
  #     parameters:
  #       - name: personId
  #         in: path
  #         required: true
  #         description: The ID of the person
  #         schema:
  #           type : string
  #           example: b2475d19-75fe-422b-9d0c-c53cdfff8230

  # /v1/reviews:
  #   get:
  #     summary: find all reviews.
  #     tags:
  #       - Reviews

  # /v1/reviews/pending:
  #   get:
  #     summary: find all pending reviews.
  #     tags:
  #       - Reviews

  # /v1/reviews/admin/pending:
  #   get:
  #     summary: find all pending reviews for admins.
  #     tags:
  #       - Reviews

  # /v1/discourse/topic/tool/{toolId}:
  #   put:
  #     summary: This route creates a new topic in Discourse if the tool exists and is active. Returns an object with the link to the new Discourse topic.
  #     tags:
  #       - Discourse
  #     parameters:
  #       - name: toolId
  #         in: path
  #         required: true
  #         description: Tool id
