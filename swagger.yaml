openapi: 3.0.0
info:
  title: HDR UK API 
  description: API for Tools and artefacts repository.
  version: 0.0.1

servers:
  - url: http://localhost:3001/api

  - url: https://{environment}-api.healthresearch.tools:{port}/api
    variables:
      environment:
        default: latest
        description: The Environment name.
      port:
        enum:
          - '443'
        default: '443'

paths:
  /dataset/{datasetID}:
    get:
      summary: Returns details for a Dataset from the Metadata catalogue.
      tags:
        - Data Sets
      parameters:
        - name: datasetID
          in: path
          required: true
          description: The ID of the datset
          schema:
            type : integer
            format: int64
            minimum: 1
            example: 89522470
      responses: 
        '200':
          description: OK    

  /person/{personID}:
    get:
      summary: Returns details for a person.
      tags:
        - Person
      parameters:
        - name: personID
          in: path
          required: true
          description: The ID of the person
          schema:
            type : string
            example: b2475d19-75fe-422b-9d0c-c53cdfff8230
      responses: 
        '200':
          description: OK 

  /search:
    get:
      summary: Returns all results
      tags:
        - Search
      responses: 
        '200':
          description: OK
  /search:
    get:
      summary: Returns search results with filters (filers can be added to searchTerms and have maxResults)
      tags:
        - Search
      parameters:
        - name: category
          in: query
          required: false
          description: A category.
          schema:
            type : string
            example: Notebook
        - name: programmingLanguage
          in: query
          required: false
          description: A programming language.
          schema:
            type : string
            example: Java
        - name: features
          in: query
          required: false
          description: A feature.
          schema:
            type : string
            example: Density Estimation
        - name: topics
          in: query
          required: false
          description: A topic.
          schema:
            type : string
            example: Lung Cancer
      responses: 
        '200':
          description: OK

  /search?search={searchTerm}:
    get:
      summary: Returns search results by searchTerm
      tags:
        - Search
      parameters:
        - name: searchTerm
          in: path
          required: true
          description: A search term.
          schema:
            type : string
            example: homebrew
      responses: 
        '200':
          description: OK

  /search?search={searchTerm}&maxResults={maxResults}:
    get:
      summary: Returns search results by searchTerm with a limit of maxResults
      tags:
        - Search
      parameters:
        - name: searchTerm
          in: path
          required: true
          description: A search term.
          schema:
            type : string
            example: a
        - name: maxResults
          in: path
          required: true
          description: A number to return
          schema:
            type : integer
            format: int64
            minimum: 1
            default: 25
      responses: 
        '200':
          description: OK
  /stats:
    get:
      summary: This will return a JSON document to show high level stats.
      tags:
        - Stats
      responses: 
        '200':
          description: OK

  /stats/recent:
    get:
      summary: Return the details on the recent searches.
      tags:
        - Stats
      responses: 
        '200':
          description: OK

  /stats/unmet:
    get:
      summary: Return the details on the unmet searches.
      tags:
        - Stats
      responses: 
        '200':
          description: OK

  /stats/popular:
    get:
      summary: Return the details on the popular objects.
      tags:
        - Stats
      responses: 
        '200':
          description: OK

  /stats/updates:
    get:
      summary: Return the details on the updated objects.
      tags:
        - Stats
      responses: 
        '200':
          description: OK

  /v1/tools/{toolID}:
    get:
      summary: Returns details for a specific tool.
      tags:
        - Tools
      parameters:
        - name: toolID
          in: path
          required: true
          description: The ID of the tool
          schema:
            type : integer
            format: int64
            minimum: 1
            example: 89522470
      responses: 
        '200':
          description: OK

  /v1/accounts:
    get:
      summary: Account search.
      tags:
        - Account
      responses: 
        '200':
          description: OK

  /v1/accounts/admin:
    get:
      summary: Account search admins.
      tags:
        - Account
      responses: 
        '200':
          description: OK

  /v1/accounts/status:
    put:
      summary: Account update status.
      tags:
        - Account
      responses: 
        '200':
          description: OK

  /v1/accounts:
    delete:
      summary: Deletes an account.
      tags:
        - Account
      responses: 
        '200':
          description: OK

  /users/:user_id:
    get:
      summary: Find user by id.
      tags:
        - Users
      responses: 
        '200':
          description: OK
  
  /v1/users:
    get:
      summary: Find all users
      tags:
        - users
      responses: 
        '200':
          description: OK

  /auth/register:
    post:
      summary: Register User.
      tags:
        - Users
      responses: 
        '200':
          description: OK
      parameters:
        - in: path
          name: body
          schema:
            type: obaject
            required: 
              - firstname
              - lastname
              - email
              - password 
            properties:
              firstname:
                type: string
              lastname:
                type: string              
              email:
                type: string
              password:
                type: string

  /auth/login:
    post:
      summary: Authenticate User.
      tags:
        - Auth
      parameters:
        - in: path
          name: body
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
              password:
                type: string    
      responses: 
        '200':
          description: OK

  /mytools/add:
    post:
      summary: Add a tool.
      tags:
        - MyTools
      responses: 
        '200':
          description: OK

  /mytools/edit:
    put:
      summary: Edit a tool.
      tags:
        - MyTools
      responses: 
        '200':
          description: OK

  /mytools/delete:
    delete:
      summary: delete a tool.
      tags:
        - MyTools
      responses: 
        '200':
          description: OK
  
  /v1/messages/:person_id:
    get:
      summary: Find messages by person.
      tags:
        - Messages

  /v1/messages/admin/:person_id:
    get:
      summary: find messages for admin by person id
      tags:
        - Messages

  /v1/reviews:
    get:
      summary: find all reviews.
      tags:
        - Reviews

  /v1/reviews/pending:
    get:
      summary: find all pending reviews.
      tags:
        - Reviews

  /v1/reviews/admin/pending:
    get:
      summary: find all pending reviews for admins.
      tags:
        - Reviews