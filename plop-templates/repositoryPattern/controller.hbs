import Controller from '../base/controller';
import { logger } from '../utilities/logger';

const logCategory = '{{entityName}}';

export default class {{capitalise entityName}}Controller extends Controller {
	constructor({{entityName}}Service) {
		super({{entityName}}Service);
		this.{{entityName}}Service = {{entityName}}Service;
	}

	async get{{capitalise entityName}}(req, res) {
		try {
            // Extract id parameter from query string
			const { id } = req.params;
            // If no id provided, it is a bad request
			if (!id) {
				return res.status(400).json({
					success: false,
					message: 'You must provide a {{entityName}} identifier',
				});
			}
            // Find the {{entityName}}
			const options = { lean: true };
			const {{entityName}} = await this.{{entityName}}Service.get{{capitalise entityName}}(id, req.query, options);
            // Return if no {{entityName}} found
			if (!{{entityName}}) {
				return res.status(404).json({
					success: false,
					message: 'A {{entityName}} could not be found with the provided id',
				});
            }
            // Return the {{entityName}}
			return res.status(200).json({
				success: true,
				...{{entityName}}
			});
		} catch (err) {
            return res.status(500).json({
				success: false,
				message: 'A server error occurred, please try again',
			});
        }
    }

	async get{{capitalise entityName}}s(req, res) {
		try {
			// Find the relevant {{entityName}}s
			const {{entityName}}s = await this.{{entityName}}Service.get{{capitalise entityName}}s(req.query).catch(err => {
				logger.logError(err, logCategory);
			});
			// Return the {{entityName}}s
			return res.status(200).json({
				success: true,
				data: {{entityName}}s,
			});
		} catch (err) {
			// Return error response if something goes wrong
			logger.logError(err, logCategory);
			return res.status(500).json({
				success: false,
				message: 'A server error occurred, please try again',
			});
		}
	}
}
